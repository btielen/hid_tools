use hid_tools::report::{expected_input_reports, parse_raw_input_report};
use hid_tools::report_descriptor::parse::report_descriptor;

fn main() {
    let keyboard_report_descriptor_bytes: Vec<u8> = vec![
        0x05, 0x01, 0x09, 0x06, 0xa1, 0x01, 0x05, 0x08, 0x19, 0x01, 0x29, 0x03, 0x15, 0x00, 0x25,
        0x01, 0x75, 0x01, 0x95, 0x03, 0x91, 0x02, 0x95, 0x05, 0x91, 0x01, 0x05, 0x07, 0x19, 0xe0,
        0x29, 0xe7, 0x95, 0x08, 0x81, 0x02, 0x75, 0x08, 0x95, 0x01, 0x81, 0x01, 0x19, 0x00, 0x29,
        0x91, 0x26, 0xff, 0x00, 0x95, 0x06, 0x81, 0x00, 0xc0,
    ];

    let event_report: Vec<u8> = vec![0x02, 0, 0x04, 0x05, 0, 0, 0, 0]; // Left shift, a and b pressed

    let report_descriptor = report_descriptor(&keyboard_report_descriptor_bytes).unwrap();
    let expected_reports = expected_input_reports(&report_descriptor).unwrap();
    let parsed_report = parse_raw_input_report(&event_report, &expected_reports).unwrap();

    println!("Report Descriptor: \n{}", report_descriptor);
    println!("Event: {:?} \n\n{}", event_report, parsed_report);
}
